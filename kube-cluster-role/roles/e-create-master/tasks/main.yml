---
- name: get api address
  shell: ifconfig eth0 | grep 'inet'| cut -d':' -f2 | awk '{print $2}'
  register: ip_addr

- debug: var=ip_addr.stdout_lines

# - name: create .kube directory
#   become: yes
#   become_user: ubuntu
#   file:
#     path: $HOME/.kube
#     state: directory
#     mode: 0755

# - name: copy admin.conf to user's kube config
#   copy:
#     src: /etc/kubernetes/admin.conf
#     dest: /home/ubuntu/.kube/config
#     remote_src: yes
#     owner: ubuntu

- name: reset Kubernetes master (just in case)
  command: kubeadm reset -f
  register: out

- debug: var=out.stdout_lines

# - name: initialize Kubernetes master
#   command: kubeadm init --ignore-preflight-errors=all
#   register: out

# - debug: var=out.stdout_lines

- name: Initialize the Kubernetes cluster using kubeadm
  # shell: kubeadm init --pod-network-cidr=10.4.0.0/16 --service-cidr=10.5.0.0/16 --service-dns-domain=k8s.local --apiserver-advertise-address={{ ip_addr.stdout }}
  shell: kubeadm init --apiserver-advertise-address={{ ip_addr.stdout }}
  ignore_errors: True

- name: get join command
  shell: kubeadm token create --print-join-command
  register: join_command_raw

- name: set join command
  set_fact:
    join_command: "{{ join_command_raw.stdout_lines[0] }}"

- name: create local file with info returned by kubeadm join
  become: true
  become_user: "{{ lookup('env', 'USER') }}"
  become_method: sudo
  local_action: copy content="{{ join_command }}" dest="./current_cluster/kubeadm-init.txt"

- name: create .kube directory
  file:
    path: /home/ubuntu/.kube
    state: directory
    mode: 0777

- name: copy admin.conf to users kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    remote_src: yes
    owner: ubuntu

- name: Wait few seconds for images pulls and cluster services to start
  pause: seconds=10
  changed_when: false

- name: wait for alls pod to be running except kube-dns/coredns
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl get --namespace kube-system pods --no-headers | grep -v -w 'Running' | grep -v 'kube-dns' | grep -v 'coredns' || true "
  register: command_result
  until: command_result.stdout == ""
  retries: 25
  delay: 5
  changed_when: false

- name: sanity - make sure master is up - sometimes the above condition is empty as master is in fact not working..
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl get --namespace kube-system pods --no-headers > /dev/null "
  delay: 5
  changed_when: false

- name: Set coredns replicas to number of masters (a good practice; by default there are 2 coredns)
  shell: "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl scale --replicas={{ groups['masters'] | length }} -n kube-system deployment/coredns"
  when:
  - groups['masters'] | length > 1
  - inventory_hostname in groups['primary-master']
  tags:
  - scale
  - scale_dns
...